#!/usr/bin/env php

<?php

use Blackbit\PimcoreBundleManager\lib\Pim\Helper;
use Blackbit\PimcoreBundleManager\lib\Pim\Cli;
use Pimcore\Config;
use Pimcore\Bootstrap;

if (file_exists($a = getcwd() . '/vendor/autoload.php')) {
    require_once $a;
    $projectRoot = getcwd();
} elseif (file_exists($a = __DIR__ . '/../../../../vendor/autoload.php')) {
    require_once $a;
    $projectRoot = __DIR__ . '/../../../..';
} elseif (file_exists($a = __DIR__ . '/../autoload.php')) {
    require_once $a;
    $projectRoot = __DIR__ . '/..';
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}
define('PIMCORE_PROJECT_ROOT', $projectRoot);

Bootstrap::defineConstants();
$kernel = Bootstrap::kernel();

foreach($_SERVER['argv'] as $bundleName) {
    if (version_compare(Helper::getPimcoreVersion(), '11', '<')) {
        Cli::exec(realpath(PIMCORE_PROJECT_ROOT.DIRECTORY_SEPARATOR.'bin'.DIRECTORY_SEPARATOR.'console').' pimcore:bundle:enable'.$bundleName);
    } else {
        try {
            $installerKernel = new \Blackbit\PimcoreBundleManager\Tools\InstallerKernel(PIMCORE_PROJECT_ROOT, Config::getEnvironment(), true);
            $bundleConfigFile = $installerKernel->getBundlesConfigFile();
            $bundles = require $bundleConfigFile;
            $bundleClass = getBundleClass($bundleName);

            $bundles[$bundleClass] = ['all' => true];

            $fileContent = '<?php
    
    return [';
            foreach ($bundles as $bundleClass => $enableSetting) {
                $fileContent .= PHP_EOL.'    '.$bundleClass.'::class => [';
                foreach ($enableSetting as $environment => $isEnabled) {
                    $fileContent .= '\''.$environment.'\' => '.var_export($isEnabled, true).',';
                }
                $fileContent .= '],';
            }
            $fileContent .= PHP_EOL.'];';

            Cli::exec(realpath(PIMCORE_PROJECT_ROOT.DIRECTORY_SEPARATOR.'bin'.DIRECTORY_SEPARATOR.'console').' cache:clear');

            file_put_contents($bundleConfigFile, $fileContent);

            echo "Bundle $bundleName successfully enabled and installed.\n";
        } catch (\Throwable $exception) {
            echo $exception->getMessage();
        }
    }

    Cli::exec(realpath(PIMCORE_PROJECT_ROOT.DIRECTORY_SEPARATOR.'bin'.DIRECTORY_SEPARATOR.'console').' cache:clear');
    Cli::exec(realpath(PIMCORE_PROJECT_ROOT.DIRECTORY_SEPARATOR.'bin'.DIRECTORY_SEPARATOR.'console').' pimcore:bundle:install '.$bundleName);
}

function getBundleClass(string $bundleId): string
{
    global $kernel;
    $bundleId = str_replace('/', '\\', $bundleId);

    $installedClasses = getInstalledClasses();

    if (array_key_exists($bundleId, $installedClasses)) {
        $bundleClass = $installedClasses[$bundleId];
    } else {
        $bundleClass = get_class($kernel->getBundle($bundleId));
    }

    return $bundleClass;
}

function getInstalledClasses(): array
{
    global $kernel;

    /** @var \Pimcore\Extension\Bundle\PimcoreBundleManager $bundleManager */
    $bundleManager = $kernel->getContainer()->get(\Pimcore\Extension\Bundle\PimcoreBundleManager::class);

    $classes = [];
    foreach ($bundleManager->getAvailableBundles() as $class)
    {
        $classes[basename(str_replace('\\', '/', $class))] = $class;
    }

    return $classes;
}
